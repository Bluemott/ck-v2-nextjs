# Cursor AI Rules for Cowboy Kimono v2 - AWS Integration

## Project Context
This is a Next.js 15.3.4 TypeScript project with AWS serverless architecture:
- WordPress REST API integration (migrated FROM GraphQL - no GraphQL code remains)
- AWS Lambda functions for recommendations and data processing
- Tailwind CSS 4.0 for styling
- AWS Amplify for deployment
- Full TypeScript implementation

## AWS Architecture
- **Frontend**: Next.js on Amplify with CloudFront CDN
- **Backend**: WordPress on EC2 (headless CMS via REST API)
- **Serverless**: Lambda functions with API Gateway
- **Database**: Aurora Serverless for enhanced features
- **Storage**: S3 for static assets, images optimized via CloudFront

## Key Migration Notes
- **CRITICAL**: We completely removed GraphQL/AppSync - only use REST endpoints
- WordPress serves content via REST API at api.cowboykimono.com
- All GraphQL queries converted to REST API calls
- Lambda functions handle recommendations, not GraphQL resolvers

## AWS Services Integration
```typescript
// Current AWS services in use:
- AWS Amplify (hosting & CI/CD)
- AWS Lambda (serverless functions)  
- API Gateway (REST API endpoints)
- CloudFront (CDN & image optimization)
- Aurora Serverless (enhanced data features)
- S3 (static asset storage)