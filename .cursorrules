# Cursor Rules for ck-v2-nextjs Project

## MANDATORY: Always Read Project Documentation First

**BEFORE writing any code, ALWAYS read and reference the `ck-v2-nextjs.md` file to understand:**
- Project architecture and structure
- Coding standards and conventions
- Technology stack and dependencies
- Development workflow and guidelines
- Component patterns and best practices
- File organization and naming conventions

## Project Context Requirements

1. **Documentation Priority**: The `ck-v2-nextjs.md` file is the authoritative source for project guidelines. Always consult it first.

2. **Consistency Check**: Before implementing any feature or making changes, verify alignment with the documented patterns in `ck-v2-nextjs.md`.

3. **Architecture Compliance**: Ensure all code changes follow the architectural decisions and patterns documented in the project file.

## Development Workflow

### Before Writing Code:
1. Read `ck-v2-nextjs.md` completely
2. Understand the current project structure and patterns
3. Identify relevant sections for your task
4. Follow documented conventions and standards

### Code Implementation:
- Use the patterns and conventions specified in `ck-v2-nextjs.md`
- Maintain consistency with existing codebase structure
- Follow the documented component architecture
- Adhere to the specified file organization

### Quality Assurance:
- Verify code aligns with project guidelines
- Ensure consistency with documented patterns
- Check for adherence to architectural decisions

## Technology Stack Compliance

- **Next.js**: Follow Next.js 13+ App Router patterns
- **TypeScript**: Use strict typing as specified
- **Styling**: Follow the documented CSS/styling approach
- **Components**: Use the component patterns and structure defined in the project file

## File Organization

- Follow the file structure and naming conventions documented in `ck-v2-nextjs.md`
- Maintain the established directory organization
- Use the specified import/export patterns

## Error Handling and Validation

- Implement error handling as specified in the project documentation
- Follow the validation patterns and approaches documented
- Ensure proper error boundaries and user feedback

## Performance and Optimization

- Follow the performance guidelines in `ck-v2-nextjs.md`
- Implement optimizations as specified
- Maintain the documented loading and rendering strategies

## Testing and Quality

- Follow the testing approach documented in the project file
- Ensure code quality standards are met
- Validate against the specified acceptance criteria

## Deployment and Build

- Follow the deployment process documented in `ck-v2-nextjs.md`
- Ensure build configuration aligns with project requirements
- Verify environment setup matches documented specifications

## Communication

When providing code suggestions or implementations:
1. Reference specific sections of `ck-v2-nextjs.md` that informed your decisions
2. Explain how your implementation aligns with documented patterns
3. Note any deviations from the documented approach and justify them

## Continuous Updates and Documentation Maintenance

### MANDATORY: Update ck-v2-nextjs.md with All Changes

**ALWAYS update the `ck-v2-nextjs.md` file when making any of the following changes:**

#### New Features and Components
- **New Components**: Document all new components with their purpose, props, and usage patterns
- **New Pages**: Add new routes to the file structure and document their functionality
- **New Utilities**: Document new utility functions and their interfaces
- **New Dependencies**: Update the technology stack section with new packages

#### Architectural Changes
- **File Structure Changes**: Update the file structure documentation
- **Component Patterns**: Document new component patterns and conventions
- **Styling Changes**: Update design system and color palette documentation
- **Build Configuration**: Document changes to Next.js config, build scripts, or deployment

#### Technology Updates
- **Framework Updates**: Update version numbers and migration notes
- **New Tools**: Document new development tools, linters, or testing frameworks
- **Performance Optimizations**: Document new optimization strategies
- **Security Enhancements**: Update security best practices

#### Content and SEO Changes
- **SEO Updates**: Document new SEO strategies or metadata patterns
- **Analytics Changes**: Update analytics implementation documentation
- **Content Structure**: Document changes to blog, shop, or download sections
- **Image Management**: Update image optimization and management strategies

### Documentation Update Process

#### Before Making Changes:
1. **Read Current Documentation**: Understand existing patterns in `ck-v2-nextjs.md`
2. **Plan Documentation Updates**: Identify which sections need updates
3. **Follow Established Patterns**: Ensure changes align with documented standards

#### During Implementation:
1. **Update Documentation Simultaneously**: Don't wait until after coding
2. **Add New Sections**: Create new documentation sections as needed
3. **Update Existing Sections**: Modify relevant existing documentation
4. **Maintain Consistency**: Ensure documentation matches implementation

#### After Implementation:
1. **Verify Documentation Accuracy**: Ensure docs reflect actual code
2. **Update Examples**: Provide code examples for new patterns
3. **Review Completeness**: Check that all changes are documented
4. **Test Documentation**: Ensure new developers can follow the docs

### Documentation Sections to Update

#### Always Update These Sections:
- **Technology Stack**: New dependencies, versions, tools
- **File Structure**: New files, directories, organization changes
- **Component Architecture**: New components, patterns, interfaces
- **Development Workflow**: New scripts, guidelines, standards
- **Deployment and Build**: Configuration changes, environment updates

#### Update When Relevant:
- **Styling and Design System**: New design patterns, color changes
- **SEO and Performance**: New optimization strategies, analytics
- **Content Management**: New content types, management strategies
- **Error Handling**: New error patterns, validation strategies
- **Security**: New security measures, best practices

### Documentation Standards

#### Writing Style:
- **Clear and Concise**: Use simple, direct language
- **Code Examples**: Include practical code examples
- **Step-by-Step**: Break complex processes into steps
- **Consistent Formatting**: Use consistent markdown formatting

#### Content Organization:
- **Logical Flow**: Organize information logically
- **Cross-References**: Link related sections
- **Version Notes**: Document version-specific information
- **Migration Guides**: Include upgrade/migration instructions

#### Maintenance:
- **Regular Reviews**: Periodically review and update documentation
- **Version Control**: Track documentation changes in git
- **Feedback Loop**: Incorporate developer feedback
- **Living Document**: Treat documentation as a living, evolving resource

### Automated Documentation Checks

#### Before Committing:
1. **Documentation Completeness**: Ensure all changes are documented
2. **Code-Doc Alignment**: Verify documentation matches implementation
3. **Example Accuracy**: Test all code examples
4. **Link Validation**: Check all internal and external links

#### Quality Assurance:
- **Spell Check**: Ensure proper spelling and grammar
- **Format Consistency**: Maintain consistent formatting
- **Section Completeness**: Ensure all sections are complete
- **Cross-Reference Accuracy**: Verify all references are accurate

---

**CRITICAL**: The `ck-v2-nextjs.md` file is your primary reference AND living documentation. Always consult it before writing code AND always update it when making changes. This ensures the documentation stays current and useful for all developers working on the project.
